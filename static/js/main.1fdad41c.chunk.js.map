{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","cardComponent","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","appState","searchField","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCASC,G,MAfF,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,GAI1B,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,6BACI,4BAAKL,GACL,2BAAIC,OCgBLK,EAzBE,SAAC,GAAkB,IAO1BC,EAPyB,EAAdC,OAOYC,KAAM,SAACC,EAAMC,GACtC,OAAQ,kBAAC,EAAD,CACIC,IAAKF,EAAKR,GACVA,GAAIQ,EAAKR,GACTF,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,WAM5B,OACI,6BACKM,ICJEM,EAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCACbY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCKXI,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAChEJ,EAAMK,WCqBJC,E,YAtBX,WAAaN,GAAQ,IAAD,8BAChB,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHE,E,+EAODC,EAAOC,GACtBC,KAAKC,SAAU,CAAEJ,UAAU,M,+BAK3B,OAAIG,KAAKJ,MAAMC,SACJ,gDAGAG,KAAKX,MAAMK,a,GAlBHQ,aCOrBC,EAAW,CACbzB,OAAQ,GACR0B,YAAa,IA8FFC,E,YAvFX,aAAgB,IAAD,8BACX,+CAwBJC,eAAkB,SAACC,GAQf,EAAKN,SAAS,CAACG,YAAaG,EAAMC,OAAOC,SA/BzC,EAAKb,MAAQO,EAFF,E,iFAMO,IAAD,OACjBO,QAAQC,IAAK,kBACbC,MAAM,8CACDC,MAAM,SAAAC,GAGH,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACH,EAAKf,SAAU,CAAEvB,OAAQsC,S,+BAgC5B,MAE2BhB,KAAKJ,MAA7BlB,EAFH,EAEGA,OAAQ0B,EAFX,EAEWA,YAGVa,EAAiBvC,EAAOwC,QAAQ,SAAAC,GAClC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAASjB,EAAYgB,kBAKzD,OAHAV,QAAQC,IAAIM,GAGU,IAAlBvC,EAAO4C,OACA,wBAAIjD,UAAU,SAAd,cAGH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKM,iBAI9B,kBAAC,EAAD,KAKI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAUuC,W,GA5E9Bf,a,MCblBqB,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SPoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.1fdad41c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n// destructuring dentro da passagem de parametro\r\nconst Card = ( { name, email, id } ) => {\r\n\r\n    // destructuring - versao 01\r\n    //const { name, email, id } = props;\r\n    return (\r\n        <div className=\"bg-light-green dib br3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ( { robots } ) => {\r\n\r\n    // para testes do ErrorBoundry\r\n    //if (true) { throw new Error ('Error in CardList') }\r\n\r\n    // loop (feito via map) - cria um array dos componentes a serem renderizados\r\n    // sugestao de render para codigo mais limpo\r\n    const cardComponent = robots.map ( (user, i) => {\r\n        return (<Card \r\n                    key={user.id}  \r\n                    id={user.id} \r\n                    name={user.name} \r\n                    email={user.email}\r\n                />\r\n            );\r\n    }  )\r\n    \r\n    // retorna um div com evaluate renderizando os componentes\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n// onChange eh um atributo do JSX (React)\r\n// searchChange eh um atributo do PROP (passado como parametro na sintaxe de destructuring)\r\n// que contem uma função definida no elemento pai a ser executado quando o valor no input for alterado\r\n// (evento de alteração captrado pelo onChange)\r\n\r\nconst SearchBox = ( {searchChange} ) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots\" \r\n                onChange={searchChange}/>\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n// exemplo de como criar WRAPPER COMPONENT , isso eh, renderiza o que esta dentro\r\n/**\r\n * <Scroll>\r\n *   ... RENDER CHILDREN ...\r\n * </Scroll> \r\n */\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div> \r\n    );\r\n};\r\n\r\n// overflowY: 'scroll' é versao JSX do CSS overflow-y que eh para definir scroll\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n// componente que envelopea outros componentes para detectar e processar  erros\r\n// qualquer erro com componente filho eh capturado e a mensagem de erro eh exibida\r\n// segue o mesmo principio de try/catch , so que aplicado a componente\r\n\r\n/**\r\n * ATENCAO: FUNCIONA SOMENTE EM BUILD PRODUCTION\r\n * EM DEV MODE, CONTINUA MOSTRANDO O ERRO\r\n */\r\nclass ErrorBoundry extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch (error, info) {\r\n        this.setState( { hasError: true } );\r\n    }\r\n\r\n    render () {\r\n        // renderiza mensagem de erro\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. Problem</h1>;\r\n        // renderiza o componente filho\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nimport CardList from '../components/CardList';\r\n// versao com lista de robots estatica de robots.js\r\n//import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// objeto que representa o estado da aplicação\r\n// versao com lista de robots estatica de robots.js \r\n/* const appState = {\r\n    robots: robots,\r\n    searchField: \"\"\r\n} */\r\n\r\nconst appState = {\r\n    robots: [],\r\n    searchField: \"\"\r\n}\r\n\r\n\r\n//const App = () => {\r\nclass App extends Component {\r\n    \r\n    constructor () {\r\n        super();\r\n        this.state = appState;\r\n    }\r\n    \r\n    // parte do React - nao precisa usar arrow functions\r\n    componentDidMount () {\r\n        console.log ('App.js mounted');\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then( response => {\r\n                // para tese de tempo de carga\r\n                //setTimeout(5000);\r\n                return response.json();\r\n            })\r\n            .then( users => {\r\n                this.setState( { robots: users } );\r\n            });\r\n    }\r\n    \r\n    // function a ser passada como PROP para box, obtem o valor capturado pelo evento\r\n    // sempre usar ARROW FUNCTION no React para metodos custom\r\n    // isso força o \"this\" seja referencia ao objeto-escopo onde a função foi criada\r\n    // e não dentro do objeto-escopo da execução. Nesse caso this é sempre App\r\n    // this.setState - metodo para setar estado, nunca deve ser feito via acesso\r\n    // direto as propriedades do this.state\r\n    onSearchChange  = (event) => {\r\n        // console.log(event.target.value);\r\n        \r\n        // padrao para atualizar o estado this.setState\r\n    \r\n\r\n        //1. SearchBox comunica a alteração do estado ao pai App.js \r\n        // (no caso alteração do valor da searchField)\r\n        this.setState({searchField: event.target.value});\r\n        \r\n        //2. o pai App.js realiza uma ação em relação a alteração do estado informada\r\n        // (no caso, aplica o novo valor do searchFeld como parametro de filtro)\r\n        \r\n        \r\n        //3 . o pai App.js atualiza o estado  de acordo com o resultado do processamento\r\n        //this.setState({robots: filteredRobots});\r\n       \r\n\r\n        //console.log(filteredRobots);\r\n    };\r\n    \r\n\r\n    render() {  \r\n         // destructuring para limpar legibilidade\r\n        const { robots, searchField } = this.state;\r\n\r\n        // atualiza com base no valor da propriedade lida\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());    \r\n        });\r\n        console.log(filteredRobots);\r\n\r\n        // tratamento para tempo de 'loading'\r\n        if (robots.length === 0) { // if (!robots.length)  - mais limpo\r\n            return <h1 className=\"f2 tc\">Loading!!!</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f2\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    {\r\n                        // o valor dos PROPS eh obtido por meio do estado do parent componente (App)\r\n                    }\r\n                    <Scroll>\r\n                        {\r\n                            // Error Boundry - comp intercepta erro no CardLost e exibde tratamento\r\n                            // funciona somente em modo produçãp, dem dev nao tem ação\r\n                        }\r\n                        <ErrorBoundry>\r\n                            <CardList robots = {filteredRobots} />\r\n                        </ErrorBoundry>    \r\n                    </Scroll>    \r\n                </div>\r\n            \r\n            );\r\n        }\r\n                \r\n    }\r\n}\r\n\r\n// APP - componente pai para todos os componentes da aplicação\r\n// esse componente é rendered no index.js\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\n\n// lib de estilos, import aqui para ser disponiveis para todos os componentes\nimport 'tachyons';\n\n// render - utiliza componente <CardList/> para renderizar a lista\nReactDOM.render(\n    <App/>   \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}